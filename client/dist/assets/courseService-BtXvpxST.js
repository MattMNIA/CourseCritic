import{J as s}from"./index-DX5mPb-7.js";const u={getAllCourses:async()=>(await s.get("/courses")).data,getCourseById:async e=>(await s.get(`/courses/${e}`)).data,createCourse:async e=>(await s.post("/courses",e)).data,updateCourse:async(e,r)=>(await s.put(`/courses/${e}`,r)).data,deleteCourse:async e=>{await s.delete(`/courses/${e}`)},getCoursesByUniversity:async e=>{try{const r=await fetch(`/api/courses/university/${e}`);if(!r.ok)throw new Error("Failed to fetch courses");return await r.json()}catch(r){return console.error("Error fetching courses:",r),[]}},getCourse:async e=>{const r=await fetch(`/api/course/${e}`);if(!r.ok)throw new Error("Failed to fetch course");return await r.json()},getCourseReviews:async e=>{const r=await fetch(`/api/course/${e}/reviews`);if(!r.ok)throw new Error("Failed to fetch course reviews");return await r.json()},searchCourses:async({universityId:e,courseId:r,professorId:a})=>{try{let o="/api/search/courses";const t=new URLSearchParams;e&&t.append("university_id",e),r&&t.append("course_id",r),a&&t.append("professor_id",a);const n=t.toString();n&&(o+="?"+n);const c=await fetch(o);if(!c.ok)throw new Error("Failed to fetch courses");return await c.json()}catch(o){return console.error("Failed to search courses:",o),[]}}};export{u as c};
